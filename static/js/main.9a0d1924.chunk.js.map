{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constans.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPanding","robots","error","Boolean","window","location","hostname","match","Card","roboProps","name","email","id","className","src","alt","CardList","propsRobots","map","user","i","key","username","SearchBox","propsSearchChange","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9a0d1924.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PEDNING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constans';;\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {})=>{\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD:\n    return Object.assign({}, state, {searchField:action.payload});\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPanding: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) =>  {\n  switch(action.type){\n    case REQUEST_ROBOTS_PEDNING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots:action.payload, isPending: false}) \n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})  \n      default:\n        return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (roboProps) => {\n  const {name, email, id} = roboProps;\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = (propsRobots) => {\n  const { robots } = propsRobots;\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              username={robots[i].username}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (propsSearchChange) => {\n  const {searchChange} = propsSearchChange;\n  return (\n    <div className='pa2'>\n      <input\n      onChange={searchChange}\n      className='pa3 ba b--green bg-lightest-blue'\n       type='search'\n       placeholder='search robots'\n       />\n    </div>\n)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY:'scroll', height:'700px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\ncomponentDidCatch(error, info){\n  this.setState({hasError:true})\n}\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <h1>Ooops. That is not good</h1>\n      )\n    }\n    return (\n      this.props.children\n    )\n  }\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport './App.css';\n// import { requestRobots } from '../reducers';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n\n  render() {\n    const { robots,searchField, onSearchChange, isPending } = this.props;\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    if (isPending) {\n      return <h1>Loading</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f2'>Robofriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filterRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PEDNING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constans';\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n}\n\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PEDNING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))  \n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PEDNING = 'REQUEST_ROBOTS_PEDNING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}